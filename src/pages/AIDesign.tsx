import { useState, useRef } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Textarea } from "@/components/ui/textarea";
import { useClientType } from "@/contexts/ClientTypeContext";
import { 
  Upload, 
  Sparkles, 
  Download, 
  ShoppingCart, 
  Palette, 
  Wand2, 
  Image as ImageIcon,
  Loader2,
  RefreshCw,
  Heart,
  Share2,
  Settings,
  Zap,
  Camera,
  User,
  Building2,
  ArrowLeft
} from "lucide-react";
import { Link } from "react-router-dom";

interface AIStyle {
  id: string;
  name: string;
  description: string;
  prompt: string;
  preview: string;
  category: 'artistic' | 'modern' | 'vintage' | 'abstract';
  color: string;
}

interface GeneratedDesign {
  id: string;
  originalImage: string;
  generatedImage: string;
  style: AIStyle;
  prompt: string;
  timestamp: number;
}

const aiStyles: AIStyle[] = [
  {
    id: 'pop-art',
    name: '–ü–æ–ø-–∞—Ä—Ç',
    description: '–Ø—Ä–∫–∏–µ —Ü–≤–µ—Ç–∞, –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω—ã–µ —Ñ–æ—Ä–º—ã –≤ —Å—Ç–∏–ª–µ –≠–Ω–¥–∏ –£–æ—Ä—Ö–æ–ª–∞',
    prompt: 'pop art style, vibrant colors, high contrast, Andy Warhol inspired',
    preview: 'üé®',
    category: 'artistic',
    color: 'bg-pink-100 text-pink-800'
  },
  {
    id: 'street-art',
    name: '–°—Ç—Ä–∏—Ç-–∞—Ä—Ç',
    description: '–ì—Ä–∞—Ñ—Ñ–∏—Ç–∏ —Å—Ç–∏–ª—å, –≥–æ—Ä–æ–¥—Å–∫–∞—è —ç—Å—Ç–µ—Ç–∏–∫–∞',
    prompt: 'street art, graffiti style, urban aesthetic, spray paint effect',
    preview: 'üèôÔ∏è',
    category: 'modern',
    color: 'bg-orange-100 text-orange-800'
  },
  {
    id: 'minimalist',
    name: '–ú–∏–Ω–∏–º–∞–ª–∏–∑–º',
    description: '–ß–∏—Å—Ç—ã–µ –ª–∏–Ω–∏–∏, –ø—Ä–æ—Å—Ç—ã–µ —Ñ–æ—Ä–º—ã, –º–æ–Ω–æ—Ö—Ä–æ–º',
    prompt: 'minimalist design, clean lines, simple shapes, monochrome',
    preview: '‚ö™',
    category: 'modern',
    color: 'bg-gray-100 text-gray-800'
  },
  {
    id: 'cyberpunk',
    name: '–ö–∏–±–µ—Ä–ø–∞–Ω–∫',
    description: '–ù–µ–æ–Ω–æ–≤—ã–µ —Ü–≤–µ—Ç–∞, —Ñ—É—Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π —Å—Ç–∏–ª—å',
    prompt: 'cyberpunk style, neon colors, futuristic, digital glitch effect',
    preview: 'üåÜ',
    category: 'modern',
    color: 'bg-purple-100 text-purple-800'
  },
  {
    id: 'watercolor',
    name: '–ê–∫–≤–∞—Ä–µ–ª—å',
    description: '–ú—è–≥–∫–∏–µ –ø–µ—Ä–µ—Ö–æ–¥—ã, —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –º–∞–∑–∫–∏',
    prompt: 'watercolor painting style, soft gradients, artistic brushstrokes',
    preview: 'üé®',
    category: 'artistic',
    color: 'bg-blue-100 text-blue-800'
  },
  {
    id: 'vintage',
    name: '–í–∏–Ω—Ç–∞–∂',
    description: '–†–µ—Ç—Ä–æ —Å—Ç–∏–ª—å, –ø—Ä–∏–≥–ª—É—à–µ–Ω–Ω—ã–µ —Ç–æ–Ω–∞',
    prompt: 'vintage style, retro aesthetic, muted colors, aged effect',
    preview: 'üì∑',
    category: 'vintage',
    color: 'bg-amber-100 text-amber-800'
  },
  {
    id: 'abstract',
    name: '–ê–±—Å—Ç—Ä–∞–∫—Ü–∏—è',
    description: '–ì–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ —Ñ–æ—Ä–º—ã, –Ω–µ–æ–±—ã—á–Ω—ã–µ —Ü–≤–µ—Ç–∞',
    prompt: 'abstract art, geometric shapes, surreal colors, artistic interpretation',
    preview: 'üî∑',
    category: 'abstract',
    color: 'bg-emerald-100 text-emerald-800'
  },
  {
    id: 'cartoon',
    name: '–ú—É–ª—å—Ç—è—à–Ω—ã–π',
    description: '–Ø—Ä–∫–∏–π –º—É–ª—å—Ç–∏–ø–ª–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–π —Å—Ç–∏–ª—å',
    prompt: 'cartoon style, animated, bright colors, fun character design',
    preview: 'üòä',
    category: 'modern',
    color: 'bg-yellow-100 text-yellow-800'
  }
];

export default function AIDesign() {
  const { isRetail, isWholesale } = useClientType();
  const fileInputRef = useRef<HTMLInputElement>(null);
  
  const [uploadedImage, setUploadedImage] = useState<string | null>(null);
  const [selectedStyle, setSelectedStyle] = useState<AIStyle | null>(null);
  const [customPrompt, setCustomPrompt] = useState("");
  const [isGenerating, setIsGenerating] = useState(false);
  const [generatedDesigns, setGeneratedDesigns] = useState<GeneratedDesign[]>([]);
  const [selectedDesign, setSelectedDesign] = useState<GeneratedDesign | null>(null);
  const [selectedCategory, setSelectedCategory] = useState<string>('all');

  const categories = [
    { id: 'all', name: '–í—Å–µ —Å—Ç–∏–ª–∏', color: 'bg-gray-100 text-gray-800' },
    { id: 'artistic', name: '–•—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ', color: 'bg-pink-100 text-pink-800' },
    { id: 'modern', name: '–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ', color: 'bg-blue-100 text-blue-800' },
    { id: 'vintage', name: '–í–∏–Ω—Ç–∞–∂', color: 'bg-amber-100 text-amber-800' },
    { id: 'abstract', name: '–ê–±—Å—Ç—Ä–∞–∫—Ü–∏—è', color: 'bg-purple-100 text-purple-800' }
  ];

  const filteredStyles = selectedCategory === 'all' 
    ? aiStyles 
    : aiStyles.filter(style => style.category === selectedCategory);

  const handleImageUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file) {
      const reader = new FileReader();
      reader.onload = (e) => {
        setUploadedImage(e.target?.result as string);
      };
      reader.readAsDataURL(file);
    }
  };

  const handleGenerateDesign = async () => {
    if (!uploadedImage || !selectedStyle) return;

    setIsGenerating(true);
    
    // –°–∏–º—É–ª—è—Ü–∏—è AI –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç API call)
    setTimeout(() => {
      const newDesign: GeneratedDesign = {
        id: Date.now().toString(),
        originalImage: uploadedImage,
        generatedImage: uploadedImage, // –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ —ç—Ç–æ –±—É–¥–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ò–ò
        style: selectedStyle,
        prompt: customPrompt || selectedStyle.prompt,
        timestamp: Date.now()
      };
      
      setGeneratedDesigns(prev => [newDesign, ...prev]);
      setSelectedDesign(newDesign);
      setIsGenerating(false);
    }, 3000);
  };

  const proceedToOrder = () => {
    if (selectedDesign) {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∏–∑–∞–π–Ω –≤ localStorage –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä
      localStorage.setItem('ai-generated-design', JSON.stringify(selectedDesign));
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—É
      window.location.href = '/#calculator';
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-muted/10 to-muted/30">
      {/* Header */}
      <header className="bg-white/95 backdrop-blur-sm border-b shadow-minimal">
        <div className="container mx-auto px-6 py-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-4">
              <Link to="/" className="flex items-center gap-2 text-muted-foreground hover:text-foreground transition-colors">
                <ArrowLeft className="w-5 h-5" />
                –ù–∞–∑–∞–¥ –Ω–∞ –≥–ª–∞–≤–Ω—É—é
              </Link>
              
              <div className="w-px h-6 bg-border"></div>
              
              <div className="flex items-center gap-3">
                <div className="w-10 h-10 bg-gradient-to-br from-brand-purple to-brand-blue rounded-large flex items-center justify-center">
                  <Sparkles className="w-6 h-6 text-white" />
                </div>
                <div>
                  <h1 className="text-xl font-medium">AI –î–∏–∑–∞–π–Ω–µ—Ä</h1>
                  <p className="text-sm text-muted-foreground">–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–Ω—Ç–æ–≤ —Å –ø–æ–º–æ—â—å—é –ò–ò</p>
                </div>
              </div>
            </div>

            <div className="flex items-center gap-4">
              {/* Client Type Badge */}
              <Badge 
                variant="outline" 
                className={`flex items-center gap-2 ${
                  isRetail 
                    ? 'border-brand-blue text-brand-blue bg-brand-blue/5' 
                    : 'border-brand-green text-brand-green bg-brand-green/5'
                }`}
              >
                {isRetail ? <User className="w-4 h-4" /> : <Building2 className="w-4 h-4" />}
                {isRetail ? '–î–ª—è —Å–µ–±—è' : '–î–ª—è –±–∏–∑–Ω–µ—Å–∞'}
              </Badge>
            </div>
          </div>
        </div>
      </header>

      <div className="container mx-auto px-6 py-12">
        <div className="max-w-7xl mx-auto">
          
          {/* Hero Section */}
          <div className="text-center mb-12">
            <div className="inline-flex items-center gap-2 px-4 py-2 bg-gradient-to-r from-brand-purple/10 to-brand-blue/10 rounded-large mb-6">
              <Zap className="w-5 h-5 text-brand-purple" />
              <span className="font-medium text-brand-purple">Powered by AI</span>
            </div>
            
            <h1 className="text-4xl lg:text-5xl font-medium mb-6">
              –°–æ–∑–¥–∞–π—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø—Ä–∏–Ω—Ç
            </h1>
            
            <p className="text-xl text-muted-foreground max-w-3xl mx-auto">
              –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Å–≤–æ—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é, –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å, –∏ –Ω–∞—à –ò–ò —Å–æ–∑–¥–∞—Å—Ç –ø–æ—Ç—Ä—è—Å–∞—é—â–∏–π –ø—Ä–∏–Ω—Ç 
              –¥–ª—è –Ω–∞–Ω–µ—Å–µ–Ω–∏—è –Ω–∞ –æ–¥–µ–∂–¥—É. –û—Ç —Ñ–æ—Ç–æ –¥–æ –∑–∞–∫–∞–∑–∞ –∑–∞ 3 —à–∞–≥–∞!
            </p>
          </div>

          <div className="grid lg:grid-cols-12 gap-8">
            
            {/* –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - –ó–∞–≥—Ä—É–∑–∫–∞ –∏ —Å—Ç–∏–ª–∏ */}
            <div className="lg:col-span-4 space-y-6">
              
              {/* –®–∞–≥ 1: –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è */}
              <Card>
                <CardContent className="p-6">
                  <div className="flex items-center gap-3 mb-4">
                    <div className="w-8 h-8 bg-brand-blue rounded-full flex items-center justify-center text-white font-medium text-sm">
                      1
                    </div>
                    <h3 className="text-lg font-medium">–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ</h3>
                  </div>
                  
                  <div 
                    className="border-2 border-dashed border-muted rounded-large p-8 text-center cursor-pointer hover:border-brand-blue/50 transition-colors"
                    onClick={() => fileInputRef.current?.click()}
                  >
                    {uploadedImage ? (
                      <div className="space-y-4">
                        <img 
                          src={uploadedImage} 
                          alt="Uploaded" 
                          className="w-full h-48 object-cover rounded-minimal"
                        />
                        <Button variant="outline" size="sm">
                          <RefreshCw className="w-4 h-4 mr-2" />
                          –ó–∞–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ
                        </Button>
                      </div>
                    ) : (
                      <div>
                        <Camera className="w-12 h-12 text-muted-foreground mx-auto mb-4" />
                        <p className="font-medium mb-2">–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏</p>
                        <p className="text-sm text-muted-foreground">
                          JPG, PNG –¥–æ 10MB
                        </p>
                      </div>
                    )}
                  </div>
                  
                  <input
                    ref={fileInputRef}
                    type="file"
                    accept="image/*"
                    onChange={handleImageUpload}
                    className="hidden"
                  />
                </CardContent>
              </Card>

              {/* –®–∞–≥ 2: –í—ã–±–æ—Ä —Å—Ç–∏–ª—è */}
              <Card>
                <CardContent className="p-6">
                  <div className="flex items-center gap-3 mb-4">
                    <div className="w-8 h-8 bg-brand-purple rounded-full flex items-center justify-center text-white font-medium text-sm">
                      2
                    </div>
                    <h3 className="text-lg font-medium">–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å</h3>
                  </div>

                  {/* –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ */}
                  <div className="flex flex-wrap gap-2 mb-4">
                    {categories.map(category => (
                      <Badge
                        key={category.id}
                        variant="outline"
                        className={`cursor-pointer transition-all ${
                          selectedCategory === category.id 
                            ? category.color 
                            : 'hover:bg-muted'
                        }`}
                        onClick={() => setSelectedCategory(category.id)}
                      >
                        {category.name}
                      </Badge>
                    ))}
                  </div>

                  {/* –°—Ç–∏–ª–∏ */}
                  <div className="grid grid-cols-2 gap-3">
                    {filteredStyles.map(style => (
                      <div
                        key={style.id}
                        className={`p-3 border-2 rounded-large cursor-pointer transition-all ${
                          selectedStyle?.id === style.id
                            ? 'border-brand-purple bg-brand-purple/5'
                            : 'border-border hover:border-muted-foreground'
                        }`}
                        onClick={() => setSelectedStyle(style)}
                      >
                        <div className="text-2xl mb-2">{style.preview}</div>
                        <h4 className="font-medium text-sm">{style.name}</h4>
                        <p className="text-xs text-muted-foreground">{style.description}</p>
                      </div>
                    ))}
                  </div>

                  {/* –ö–∞—Å—Ç–æ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç */}
                  <div className="mt-4">
                    <label className="text-sm font-medium mb-2 block">
                      –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
                    </label>
                    <Textarea
                      placeholder="–û–ø–∏—à–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ —Å—Ç–∏–ª—è..."
                      value={customPrompt}
                      onChange={(e) => setCustomPrompt(e.target.value)}
                      className="h-20"
                    />
                  </div>
                </CardContent>
              </Card>

              {/* –ö–Ω–æ–ø–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ */}
              <Button 
                onClick={handleGenerateDesign}
                disabled={!uploadedImage || !selectedStyle || isGenerating}
                className="w-full h-12 bg-gradient-to-r from-brand-purple to-brand-blue hover:from-brand-purple/90 hover:to-brand-blue/90 text-white font-medium rounded-large"
              >
                {isGenerating ? (
                  <>
                    <Loader2 className="w-5 h-5 mr-2 animate-spin" />
                    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∏–∑–∞–π–Ω...
                  </>
                ) : (
                  <>
                    <Wand2 className="w-5 h-5 mr-2" />
                    –°–æ–∑–¥–∞—Ç—å –¥–∏–∑–∞–π–Ω
                  </>
                )}
              </Button>

            </div>

            {/* –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –æ–±–ª–∞—Å—Ç—å - –†–µ–∑—É–ª—å—Ç–∞—Ç—ã */}
            <div className="lg:col-span-5">
              <Card className="h-full">
                <CardContent className="p-6">
                  <h3 className="text-lg font-medium mb-6">–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∏–∑–∞–π–Ω—ã</h3>
                  
                  {isGenerating && (
                    <div className="flex flex-col items-center justify-center h-96 text-center">
                      <div className="w-16 h-16 bg-gradient-to-r from-brand-purple to-brand-blue rounded-full flex items-center justify-center mb-4 animate-pulse">
                        <Sparkles className="w-8 h-8 text-white" />
                      </div>
                      <h4 className="font-medium mb-2">–°–æ–∑–¥–∞–µ–º –≤–∞—à –¥–∏–∑–∞–π–Ω</h4>
                      <p className="text-muted-foreground mb-4">–ò–ò –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...</p>
                      <div className="w-48 h-2 bg-muted rounded-full overflow-hidden">
                        <div className="h-full bg-gradient-to-r from-brand-purple to-brand-blue w-2/3 animate-pulse"></div>
                      </div>
                    </div>
                  )}

                  {!isGenerating && generatedDesigns.length === 0 && (
                    <div className="flex flex-col items-center justify-center h-96 text-center">
                      <div className="w-16 h-16 bg-muted rounded-full flex items-center justify-center mb-4">
                        <ImageIcon className="w-8 h-8 text-muted-foreground" />
                      </div>
                      <h4 className="font-medium mb-2">–ó–¥–µ—Å—å –ø–æ—è–≤—è—Ç—Å—è –≤–∞—à–∏ –¥–∏–∑–∞–π–Ω—ã</h4>
                      <p className="text-muted-foreground">
                        –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ, –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –∏ –Ω–∞–∂–º–∏—Ç–µ "–°–æ–∑–¥–∞—Ç—å –¥–∏–∑–∞–π–Ω"
                      </p>
                    </div>
                  )}

                  {generatedDesigns.length > 0 && (
                    <div className="grid gap-4">
                      {generatedDesigns.map(design => (
                        <div
                          key={design.id}
                          className={`p-4 border-2 rounded-large cursor-pointer transition-all ${
                            selectedDesign?.id === design.id
                              ? 'border-brand-purple bg-brand-purple/5'
                              : 'border-border hover:border-muted-foreground'
                          }`}
                          onClick={() => setSelectedDesign(design)}
                        >
                          <div className="grid grid-cols-2 gap-4 mb-3">
                            <div>
                              <p className="text-xs text-muted-foreground mb-1">–û—Ä–∏–≥–∏–Ω–∞–ª</p>
                              <img 
                                src={design.originalImage} 
                                alt="Original" 
                                className="w-full h-24 object-cover rounded-minimal"
                              />
                            </div>
                            <div>
                              <p className="text-xs text-muted-foreground mb-1">AI —Ä–µ–∑—É–ª—å—Ç–∞—Ç</p>
                              <img 
                                src={design.generatedImage} 
                                alt="Generated" 
                                className="w-full h-24 object-cover rounded-minimal"
                              />
                            </div>
                          </div>
                          
                          <div className="flex items-center justify-between">
                            <Badge className={design.style.color}>
                              {design.style.name}
                            </Badge>
                            
                            <div className="flex gap-2">
                              <Button variant="ghost" size="sm">
                                <Heart className="w-4 h-4" />
                              </Button>
                              <Button variant="ghost" size="sm">
                                <Share2 className="w-4 h-4" />
                              </Button>
                              <Button variant="ghost" size="sm">
                                <Download className="w-4 h-4" />
                              </Button>
                            </div>
                          </div>
                        </div>
                      ))}
                    </div>
                  )}
                </CardContent>
              </Card>
            </div>

            {/* –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –Ω–∞ –æ–¥–µ–∂–¥–µ */}
            <div className="lg:col-span-3">
              <Card className="sticky top-6">
                <CardContent className="p-6">
                  <div className="flex items-center gap-3 mb-4">
                    <div className="w-8 h-8 bg-brand-green rounded-full flex items-center justify-center text-white font-medium text-sm">
                      3
                    </div>
                    <h3 className="text-lg font-medium">–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä</h3>
                  </div>

                  {selectedDesign ? (
                    <div className="space-y-4">
                      {/* –ú–∏–Ω–∏ –ø—Ä–µ–≤—å—é –Ω–∞ —Ñ—É—Ç–±–æ–ª–∫–µ */}
                      <div className="bg-gradient-to-br from-muted/10 to-muted/30 p-6 rounded-large">
                        <svg width="160" height="200" viewBox="0 0 160 200" className="mx-auto mb-4">
                          {/* –§—É—Ç–±–æ–ª–∫–∞ */}
                          <path
                            d="M40 40 L40 25 Q40 15 50 15 L110 15 Q120 15 120 25 L120 40 L140 55 L140 180 Q140 190 130 190 L30 190 Q20 190 20 180 L20 55 Z"
                            fill="#ffffff"
                            stroke="#e5e7eb"
                            strokeWidth="1"
                          />
                          {/* –ü—Ä–∏–Ω—Ç –æ–±–ª–∞—Å—Ç—å */}
                          <foreignObject x="55" y="50" width="50" height="40">
                            <img 
                              src={selectedDesign.generatedImage} 
                              style={{ width: '100%', height: '100%', objectFit: 'cover', borderRadius: '4px' }}
                              alt="Print preview"
                            />
                          </foreignObject>
                        </svg>
                        
                        <div className="text-center">
                          <Badge className={selectedDesign.style.color}>
                            {selectedDesign.style.name}
                          </Badge>
                        </div>
                      </div>

                      <div className="space-y-3">
                        <div className="text-sm">
                          <span className="text-muted-foreground">–°—Ç–∏–ª—å:</span>
                          <span className="ml-2 font-medium">{selectedDesign.style.name}</span>
                        </div>
                        
                        <div className="text-sm">
                          <span className="text-muted-foreground">–°–æ–∑–¥–∞–Ω:</span>
                          <span className="ml-2">{new Date(selectedDesign.timestamp).toLocaleString('ru')}</span>
                        </div>
                      </div>

                      <Button 
                        onClick={proceedToOrder}
                        className="w-full bg-brand-green hover:bg-brand-green/90 text-white h-12 rounded-large"
                      >
                        <ShoppingCart className="w-5 h-5 mr-2" />
                        –ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞–∫–∞–∑—É
                      </Button>

                      <p className="text-xs text-muted-foreground text-center">
                        –î–∏–∑–∞–π–Ω –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–µ
                      </p>
                    </div>
                  ) : (
                    <div className="text-center py-12">
                      <Settings className="w-12 h-12 text-muted-foreground mx-auto mb-4" />
                      <p className="text-muted-foreground">
                        –í—ã–±–µ—Ä–∏—Ç–µ –¥–∏–∑–∞–π–Ω –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
                      </p>
                    </div>
                  )}
                </CardContent>
              </Card>
            </div>

          </div>
        </div>
      </div>
    </div>
  );
}
